from antlr4 import *
from _typeshed import Incomplete
from io import StringIO as StringIO
from typing import TextIO

def serializedATN(): ...

class LuaParser(Parser):
    grammarFileName: str
    atn: Incomplete
    decisionsToDFA: Incomplete
    sharedContextCache: Incomplete
    literalNames: Incomplete
    symbolicNames: Incomplete
    RULE_start_: int
    RULE_chunk: int
    RULE_block: int
    RULE_stat: int
    RULE_attnamelist: int
    RULE_nameattrib: int
    RULE_attrib: int
    RULE_retstat: int
    RULE_label: int
    RULE_funcname: int
    RULE_varlist: int
    RULE_namelist: int
    RULE_explist: int
    RULE_exp: int
    RULE_var: int
    RULE_prefixexp: int
    RULE_functioncall: int
    RULE_tail: int
    RULE_args: int
    RULE_functiondef: int
    RULE_funcbody: int
    RULE_parlist: int
    RULE_tableconstructor: int
    RULE_fieldlist: int
    RULE_field: int
    RULE_fieldsep: int
    RULE_number: int
    RULE_string: int
    ruleNames: Incomplete
    EOF: Incomplete
    SEMI: int
    EQ: int
    BREAK: int
    GOTO: int
    DO: int
    END: int
    WHILE: int
    REPEAT: int
    UNTIL: int
    IF: int
    THEN: int
    ELSEIF: int
    ELSE: int
    FOR: int
    COMMA: int
    IN: int
    FUNCTION: int
    LOCAL: int
    LT: int
    GT: int
    RETURN: int
    CONTINUE: int
    CC: int
    NIL: int
    FALSE: int
    TRUE: int
    DOT: int
    SQUIG: int
    MINUS: int
    POUND: int
    OP: int
    CP: int
    NOT: int
    LL: int
    GG: int
    AMP: int
    SS: int
    PER: int
    COL: int
    LE: int
    GE: int
    AND: int
    OR: int
    PLUS: int
    STAR: int
    OCU: int
    CCU: int
    OB: int
    CB: int
    EE: int
    DD: int
    PIPE: int
    CARET: int
    SLASH: int
    DDD: int
    SQEQ: int
    NAME: int
    NORMALSTRING: int
    CHARSTRING: int
    LONGSTRING: int
    INT: int
    HEX: int
    FLOAT: int
    HEX_FLOAT: int
    COMMENT: int
    LINE_COMMENT: int
    WS: int
    NL: int
    SHEBANG: int
    def __init__(self, input: TokenStream, output: TextIO = ...) -> None: ...
    class Start_Context(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def chunk(self): ...
        def EOF(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    state: int
    def start_(self): ...
    class ChunkContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def block(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def chunk(self): ...
    class BlockContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def stat(self, i: int = None): ...
        def retstat(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def block(self): ...
    class StatContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def getRuleIndex(self): ...
        def copyFrom(self, ctx: ParserRuleContext): ...
    class Stat_emptyContext(StatContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def SEMI(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class Stat_ifContext(StatContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def IF(self): ...
        def exp(self, i: int = None): ...
        def THEN(self, i: int = None): ...
        def block(self, i: int = None): ...
        def END(self): ...
        def ELSEIF(self, i: int = None): ...
        def ELSE(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class Stat_assignmentContext(StatContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def varlist(self): ...
        def EQ(self): ...
        def explist(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class Stat_localContext(StatContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def LOCAL(self): ...
        def attnamelist(self): ...
        def EQ(self): ...
        def explist(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class Stat_labelContext(StatContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def label(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class Stat_gotoContext(StatContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def GOTO(self): ...
        def NAME(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class Stat_breakContext(StatContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def BREAK(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class Stat_repeatContext(StatContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def REPEAT(self): ...
        def block(self): ...
        def UNTIL(self): ...
        def exp(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class Stat_forContext(StatContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def FOR(self): ...
        def NAME(self): ...
        def EQ(self): ...
        def exp(self, i: int = None): ...
        def COMMA(self, i: int = None): ...
        def DO(self): ...
        def block(self): ...
        def END(self): ...
        def namelist(self): ...
        def IN(self): ...
        def explist(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class Stat_functioncallContext(StatContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def functioncall(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class Stat_localfunctionContext(StatContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def LOCAL(self): ...
        def FUNCTION(self): ...
        def NAME(self): ...
        def funcbody(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class Stat_whileContext(StatContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def WHILE(self): ...
        def exp(self): ...
        def DO(self): ...
        def block(self): ...
        def END(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class Stat_doContext(StatContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def DO(self): ...
        def block(self): ...
        def END(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class Stat_functionContext(StatContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def FUNCTION(self): ...
        def funcname(self): ...
        def funcbody(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def stat(self): ...
    class AttnamelistContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def nameattrib(self, i: int = None): ...
        def COMMA(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def attnamelist(self): ...
    class NameattribContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def NAME(self): ...
        def attrib(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def nameattrib(self): ...
    class AttribContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def LT(self): ...
        def NAME(self): ...
        def GT(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def attrib(self): ...
    class RetstatContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def RETURN(self): ...
        def BREAK(self): ...
        def CONTINUE(self): ...
        def SEMI(self): ...
        def explist(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def retstat(self): ...
    class LabelContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def CC(self, i: int = None): ...
        def NAME(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def label(self): ...
    class FuncnameContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def NAME(self, i: int = None): ...
        def DOT(self, i: int = None): ...
        def COL(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def funcname(self): ...
    class VarlistContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def var(self, i: int = None): ...
        def COMMA(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def varlist(self): ...
    class NamelistContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def NAME(self, i: int = None): ...
        def COMMA(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def namelist(self): ...
    class ExplistContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def exp(self, i: int = None): ...
        def COMMA(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def explist(self): ...
    class ExpContext(ParserRuleContext):
        parser: Incomplete
        unary_op: Incomplete
        op: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def NIL(self): ...
        def FALSE(self): ...
        def TRUE(self): ...
        def number(self): ...
        def string(self): ...
        def DDD(self): ...
        def functiondef(self): ...
        def prefixexp(self): ...
        def tableconstructor(self): ...
        def exp(self, i: int = None): ...
        def NOT(self): ...
        def POUND(self): ...
        def MINUS(self): ...
        def SQUIG(self): ...
        def CARET(self): ...
        def STAR(self): ...
        def SLASH(self): ...
        def PER(self): ...
        def SS(self): ...
        def PLUS(self): ...
        def DD(self): ...
        def LL(self): ...
        def GG(self): ...
        def AMP(self): ...
        def PIPE(self): ...
        def LT(self): ...
        def GT(self): ...
        def LE(self): ...
        def GE(self): ...
        def SQEQ(self): ...
        def EE(self): ...
        def AND(self): ...
        def OR(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def exp(self, _p: int = 0): ...
    class VarContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def NAME(self): ...
        def prefixexp(self): ...
        def tail(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def var(self): ...
    class PrefixexpContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def NAME(self): ...
        def tail(self, i: int = None): ...
        def functioncall(self): ...
        def OP(self): ...
        def exp(self): ...
        def CP(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def prefixexp(self): ...
    class FunctioncallContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def getRuleIndex(self): ...
        def copyFrom(self, ctx: ParserRuleContext): ...
    class Functioncall_expContext(FunctioncallContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def OP(self): ...
        def exp(self): ...
        def CP(self): ...
        def args(self): ...
        def tail(self, i: int = None): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class Functioncall_expinvokeContext(FunctioncallContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def OP(self): ...
        def exp(self): ...
        def CP(self): ...
        def COL(self): ...
        def NAME(self): ...
        def args(self): ...
        def tail(self, i: int = None): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class Functioncall_invokeContext(FunctioncallContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def NAME(self, i: int = None): ...
        def COL(self): ...
        def args(self): ...
        def tail(self, i: int = None): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class Functioncall_nestedinvokeContext(FunctioncallContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def functioncall(self): ...
        def COL(self): ...
        def NAME(self): ...
        def args(self): ...
        def tail(self, i: int = None): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class Functioncall_nameContext(FunctioncallContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def NAME(self): ...
        def args(self): ...
        def tail(self, i: int = None): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    class Functioncall_nestedContext(FunctioncallContext):
        def __init__(self, parser, ctx: ParserRuleContext) -> None: ...
        def functioncall(self): ...
        def args(self): ...
        def tail(self, i: int = None): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def functioncall(self, _p: int = 0): ...
    class TailContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def OB(self): ...
        def exp(self): ...
        def CB(self): ...
        def DOT(self): ...
        def NAME(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def tail(self): ...
    class ArgsContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def OP(self): ...
        def CP(self): ...
        def explist(self): ...
        def tableconstructor(self): ...
        def string(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def args(self): ...
    class FunctiondefContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def FUNCTION(self): ...
        def funcbody(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def functiondef(self): ...
    class FuncbodyContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def OP(self): ...
        def parlist(self): ...
        def CP(self): ...
        def block(self): ...
        def END(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def funcbody(self): ...
    class ParlistContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def namelist(self): ...
        def COMMA(self): ...
        def DDD(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def parlist(self): ...
    class TableconstructorContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def OCU(self): ...
        def CCU(self): ...
        def fieldlist(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def tableconstructor(self): ...
    class FieldlistContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def field(self, i: int = None): ...
        def fieldsep(self, i: int = None): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def fieldlist(self): ...
    class FieldContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def OB(self): ...
        def exp(self, i: int = None): ...
        def CB(self): ...
        def EQ(self): ...
        def NAME(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def field(self): ...
    class FieldsepContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def COMMA(self): ...
        def SEMI(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def fieldsep(self): ...
    class NumberContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def INT(self): ...
        def HEX(self): ...
        def FLOAT(self): ...
        def HEX_FLOAT(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def number(self): ...
    class StringContext(ParserRuleContext):
        parser: Incomplete
        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1) -> None: ...
        def NORMALSTRING(self): ...
        def CHARSTRING(self): ...
        def LONGSTRING(self): ...
        def getRuleIndex(self): ...
        def enterRule(self, listener: ParseTreeListener): ...
        def exitRule(self, listener: ParseTreeListener): ...
        def accept(self, visitor: ParseTreeVisitor): ...
    def string(self): ...
    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int): ...
    def exp_sempred(self, localctx: ExpContext, predIndex: int): ...
    def functioncall_sempred(self, localctx: FunctioncallContext, predIndex: int): ...
