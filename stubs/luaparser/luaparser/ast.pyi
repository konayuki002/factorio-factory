from luaparser.astnodes import *
from luaparser.utils.visitor import *
import json
from antlr4 import CommonTokenStream
from antlr4.error.ErrorListener import ErrorListener
from luaparser import printers as printers
from luaparser.builder import BuilderVisitor as BuilderVisitor
from luaparser.parser.LuaLexer import LuaLexer as LuaLexer
from luaparser.parser.LuaParser import LuaParser as LuaParser
from typing import Generator

def parse(source: str) -> Chunk: ...
def get_token_stream(source: str) -> CommonTokenStream: ...
def walk(root: Node) -> Generator[None, Node, None]: ...
def to_pretty_str(root: Node, indent: int = 2) -> str: ...
def to_lua_source(root: Node, indent: int = 4) -> str: ...
def to_xml_str(tree): ...

class JSONEncoder(json.JSONEncoder):
    def default(self, o): ...

def to_pretty_json(root: Node) -> str: ...

class ASTVisitor:
    def visit(self, root) -> None: ...

class ASTRecursiveVisitor:
    def visit(self, node) -> None: ...

class WalkVisitor:
    def __init__(self) -> None: ...
    @property
    def nodes(self): ...

class SyntaxException(Exception): ...

class ParserErrorListener(ErrorListener):
    def syntaxError(
        self, recognizer, offending_symbol, line, column, msg, e
    ) -> None: ...
    def reportAmbiguity(
        self, recognizer, dfa, start_index, stop_index, exact, ambig_alts, configs
    ) -> None: ...
    def reportAttemptingFullContext(
        self, recognizer, dfa, start_index, stop_index, conflicting_alts, configs
    ) -> None: ...
    def reportContextSensitivity(
        self, recognizer, dfa, start_index, stop_index, prediction, configs
    ) -> None: ...
